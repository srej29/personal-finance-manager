long long getMaxZerosInBlock(const string& s, long long k) {
    int n = s.length();
    long long max_zeros = 0;
    int left = 0;
    long long ones_count = 0;
    
    for (int right = 0; right < n; right++) {
        if (s[right] == '1') ones_count++;
        
        while (ones_count > k) {
            if (s[left] == '1') ones_count--;
            left++;
        }
        
        max_zeros = max(max_zeros, (long long)(right - left + 1));
    }
    
    return max_zeros;
}

long long getMaxZerosSpanning2Blocks(const string& s, long long k) {
    int n = s.length();
    string doubled = s + s;
    long long max_zeros = 0;
    int left = 0;
    long long ones_count = 0;
    
    for (int right = 0; right < 2 * n; right++) {
        if (doubled[right] == '1') ones_count++;
        
        while (ones_count > k) {
            if (doubled[left] == '1') ones_count--;
            left++;
        }
        
        max_zeros = max(max_zeros, (long long)(right - left + 1));
    }
    
    return max_zeros;
}

long long getMaxZerosSpanning3Blocks(const string& s, long long k) {
    int n = s.length();
    string tripled = s + s + s;
    long long max_zeros = 0;
    int left = 0;
    long long ones_count = 0;
    
    for (int right = 0; right < 3 * n; right++) {
        if (tripled[right] == '1') ones_count++;
        
        while (ones_count > k) {
            if (tripled[left] == '1') ones_count--;
            left++;
        }
        
        max_zeros = max(max_zeros, (long long)(right - left + 1));
    }
    
    return max_zeros;
}

long long solution(int n, int m, long long k, string s) {
    long long ones_in_s = 0;
    for (char c : s) {
        if (c == '1') ones_in_s++;
    }
    
    if (ones_in_s == 0) {
        return (long long)n * m;
    }
    
    if (k >= 2 * ones_in_s) {
        long long full_blocks = k / ones_in_s;
        if (full_blocks >= m) {
            return (long long)n * m;
        }
        
        long long remaining_k = k % ones_in_s;
        long long max_in_block = getMaxZerosInBlock(s, remaining_k);
        return full_blocks * n + max_in_block;
    }
    
    if (k >= ones_in_s) {
        long long result1 = getMaxZerosInBlock(s, k);
        long long result2 = getMaxZerosSpanning2Blocks(s, k);
        long long result3 = (m >= 3) ? getMaxZerosSpanning3Blocks(s, k) : 0LL;
        return max({result1, result2, result3});
    }
    
    long long result1 = getMaxZerosInBlock(s, k);
    long long result2 = (m >= 2) ? getMaxZerosSpanning2Blocks(s, k) : 0LL;
    
    return max(result1, result2);
}
